{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SkydiveDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","flowMetrics","target","metricField","metricFields","dedupFlow","text","value","dedupIntf","dedup","aggregates","mode","prevGremlin","prevMetricField","prevDedup","prevAggregates","prevMode","onChangeInternal","gremlin","range","panelCtrl","query","datasource","targetToQuery","q","from","format","to","doGremlinQuery","then","result","status","data","length","_","forEach","metrics","uuid","forOwn","metric","key","push","refresh","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class SkydiveDatasourceQueryCtrl extends QueryCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n\n    // set visibility of some field depending on the type of metrics returned\n    this.flowMetrics = false;\n\n    this.target.metricField = this.target.metricField || \"Bytes\";\n\n    // TODO(safchain) request datasource to get metrics fields dynamically\n    this.metricFields = [];\n\n    this.dedupFlow = [\n      {text: \"---\", value: \"---\"},\n      {text: \"LayersPath\", value: \"LayersPath\"},\n      {text: \"Application\", value: \"Application\"},\n      {text: \"TrackingID\", value: \"TrackingID\"},\n      {text: \"ParentUUID\", value: \"ParentUUID\"},\n      {text: \"NodeTID\", value: \"NodeTID\"},\n      {text: \"ANodeTID\", value: \"ANodeTID\"},\n      {text: \"BNodeTID\", value: \"BNodeTID\"}\n    ];\n\n    this.dedupIntf = [\n      {text: \"---\", value: \"---\"},\n      {text: \"ID\", value: \"ID\"},\n      {text: \"TID\", value: \"TID\"},\n      {text: \"Type\", value: \"Type\"}\n    ];\n\n    this.target.dedup = this.target.dedup || \"---\";\n    this.dedup = this.dedupFlow;\n\n    this.target.aggregates = this.target.aggregates || false;\n\n    this.target.mode = this.target.mode || \"All\";\n    this.mode = [\n      {text: \"All\", value: \"All\"},\n      {text: \"Outer only\", value: \"Outer\"},\n      {text: \"Inner only\", value: \"Inner\"}\n    ];\n\n    this.prevGremlin = \"\";\n    this.prevMetricField = this.metricField;\n    this.prevDedup = this.dedup;\n    this.prevAggregates = this.aggregates;\n    this.prevMode = this.mode;\n\n    this.onChangeInternal();\n  }\n\n  getCollapsedText() {\n    return this.target.gremlin;\n  }\n\n  onChangeInternal() {\n    var range = this.panelCtrl.range;\n\n    var query = this.datasource.targetToQuery(this.target, 1, 2);\n\n    if (this.prevGremlin != query.gremlin || this.prevMetricField != this.target.metricField ||\n        this.prevAggregates != this.target.aggregates || this.prevMode != this.target.mode) {\n\n      // flow metrics ?\n      var flowMetrics = false;\n\n      var target = {\n        gremlin: this.target.gremlin\n      };\n\n      var q = this.datasource.targetToQuery(target, range.from.format('X'), range.to.format('X'));\n      this.datasource.doGremlinQuery(q.gremlin).then(result => {\n        if (result.status === 200 && result.data.length > 0) {\n          this.metricFields = [\n            {text: \"Bytes\", value: \"Bytes\"},\n            {text: \"Packets\", value: \"Packets\"},\n          ];\n          this.prevMetricField = this.target.metricField;\n\n          _.forEach(result.data[0], (metrics, uuid) => {\n            _.forEach(metrics, metric => {\n              _.forOwn(metric, (value, key) => {\n                if (key == \"ABBytes\") {\n                  flowMetrics = true;\n                }\n                this.metricFields.push({text: key, value: key});\n              });\n\n              return false;\n            });\n            return false;\n          });\n        }\n\n        if (flowMetrics) {\n          this.dedup = this.dedupFlow;\n        } else {\n          this.dedup = this.dedupIntf;\n        }\n        if (this.flowMetrics != flowMetrics) {\n          this.flowMetrics = flowMetrics;\n\n          // reset the metricField as we changed of type of metrics\n          this.target.metricField = \"Bytes\";\n        }\n\n        this.prevGremlin = query.gremlin;\n        this.prevMetricField = this.target.metricField;\n        this.prevDedup = this.target.dedup;\n        this.prevAggregates = this.target.aggregates;\n        this.prevMode = this.target.mode;\n\n        this.panelCtrl.refresh();\n      });\n    }\n  }\n}\n\nSkydiveDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}