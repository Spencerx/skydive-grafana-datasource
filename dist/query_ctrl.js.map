{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","appEvents","TypeByKeys","Metrics","SemverCmp","SkydiveDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","metricTypes","metricFields","target","gremlin","metricType","metricField","prevGremlin","updateTypes","range","panelCtrl","datasource","getKeys","from","format","to","then","result","status","data","length","type","metrics","Object","keys","onError","message","subType","version","MinVer","push","text","Name","value","updateMetricFields","refresh","catch","bind","tm","split","fields","Fields","key","Default","err","msg","statusText","emit","templateUrl"],"mappings":"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","sourcesContent":["import { QueryCtrl } from 'app/plugins/sdk';\nimport appEvents from 'app/core/app_events';\nimport './css/query-editor.css!'\nimport { TypeByKeys, Metrics } from './metrics';\nimport { SemverCmp } from \"./semver\";\n\nexport class SkydiveDatasourceQueryCtrl extends QueryCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n\n    this.metricTypes = [];\n    this.metricFields = [];\n    \n    this.target.gremlin = this.target.gremlin || \"\";\n    this.target.metricType = this.target.metricType || 'Interface';\n    this.target.metricField = this.target.metricField || 'Interface.Default.Bytes';\n\n    this.prevGremlin = this.target.gremlin;\n\n    this.updateTypes();\n  }\n\n  getCollapsedText() {\n    return this.target.gremlin;\n  }\n\n  updateTypes() {\n    if (this.target.gremlin == \"\") {\n      return;\n    }\n\n    var range = this.panelCtrl.range;\n\n    this.datasource.getKeys(this.target.gremlin,\n      range.from.format('X'), range.to.format('X')).then(result => {\n\n        if (result.status === 200) {\n          if (!result.data || result.data.length == 0) {\n            throw(\"No data, please check your Gremlin expression\")\n          }\n\n          var type = TypeByKeys(result.data);\n\n          var metrics = Metrics[type];\n          if (Object.keys(metrics).length == 0) {\n            return this.onError({ message: \"Unable to detect type of metric\" })\n          }\n\n          this.metricTypes = [];\n          for (let subType in metrics) {\n            if (SemverCmp(this.datasource.version, metrics[subType].MinVer) >= 0) {\n              this.metricTypes.push({ text: metrics[subType].Name, value: type + \".\" + subType });\n            }\n          }\n          if (this.target.metricType == '') {\n            this.target.metricType = type + \".Default\";\n          }\n\n          this.updateMetricFields();\n\n          this.panelCtrl.refresh();\n        }\n      }).catch(this.onError.bind(this));\n  }\n\n  updateMetricFields() {\n    var tm = this.target.metricType.split(\".\");\n\n    var type = tm[0];\n    var subType = tm[1];\n\n    this.metricFields = [];\n\n    var fields = Metrics[type][subType].Fields;\n    for (let key in fields) {\n      this.metricFields.push({ text: fields[key].Name, value: this.target.metricType + \".\" + key });\n    }\n    if (this.target.metricField == '') {\n      this.target.metricField = this.target.metricType + \".\" + Metrics[type][subType].Default;\n    }\n  }\n\n  onMetricTypeChange() {\n    this.target.metricField = '';\n    this.updateMetricFields();\n\n    this.panelCtrl.refresh();\n  }\n\n  onMetricFieldChange() {\n    this.panelCtrl.refresh();\n  }\n\n  onGremlinChange() {\n    if (this.target.gremlin == \"\") {\n      return;\n    }\n\n    if (this.prevGremlin != this.target.gremlin) {\n      this.prevGremlin = this.target.gremlin;\n\n      this.target.metricType = '';\n      this.target.metricField = '';\n\n      this.updateTypes();\n    }\n  }\n\n  onError(err) {\n    if (err.status) {\n      var msg = err.status + \" - \" + err.statusText;\n      if (err.data && err.data.length > 0) {\n        msg += \" : \" + err.data;\n      }\n      appEvents.emit('alert-error', ['Error', msg]);\n    } else {\n      appEvents.emit('alert-error', ['Error', err]);\n    }\n  }\n}\n\nSkydiveDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"],"file":"query_ctrl.js"}