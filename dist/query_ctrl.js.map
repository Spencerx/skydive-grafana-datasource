{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SkydiveDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","metricType","target","metricField","metricFields","metricTypeFields","dedupFlow","text","value","dedupIntf","dedup","aggregates","mode","prevWorked","prevTitle","prevGremlin","prevMetricField","prevDedup","prevAggregates","prevMode","onChangeInternal","gremlin","range","panelCtrl","query","datasource","targetToQuery","title","q","from","format","to","doGremlinQuery","then","result","status","data","length","_","forEach","metrics","uuid","forOwn","metric","key","k","push","refresh","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class SkydiveDatasourceQueryCtrl extends QueryCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n\n    // set visibility of some field depending on the type of metrics returned\n    this.metricType = 'interface';\n\n    this.target.metricField = this.target.metricField || \"Bytes\";\n\n    this.metricFields = [];\n    this.metricTypeFields = {\n      \"interface\": [\n        'Bytes',\n        'Packets',\n        'Collisions',\n        'Multicast',\n        'RxBytes',\n        'RxCompressed',\n        'RxCrcErrors',\n        'RxDropped',\n        'RxErrors',\n        'RxFifoErrors',\n        'RxFrameErrors',\n        'RxLengthErrors',\n        'RxMissedErrors',\n        'RxOverErrors',\n        'RxPackets',\n        'TxAbortedErrors',\n        'TxBytes',\n        'TxCarrierErrors',\n        'TxCompressed',\n        'TxDropped',\n        'TxErrors',\n        'TxFifoErrors',\n        'TxHeartbeatErrors',\n        'TxPackets',\n        'TxWindowErrors'\n      ],\n      \"flow\": [\n        'Bytes',\n        'Packets',\n        'ABPackets',\n        'ABBytes',\n        'BAPackets',\n        'BABytes'\n      ]\n    };\n\n    this.dedupFlow = [\n      {text: \"---\", value: \"---\"},\n      {text: \"LayersPath\", value: \"LayersPath\"},\n      {text: \"Application\", value: \"Application\"},\n      {text: \"TrackingID\", value: \"TrackingID\"},\n      {text: \"ParentUUID\", value: \"ParentUUID\"},\n      {text: \"NodeTID\", value: \"NodeTID\"},\n      {text: \"ANodeTID\", value: \"ANodeTID\"},\n      {text: \"BNodeTID\", value: \"BNodeTID\"}\n    ];\n\n    this.dedupIntf = [\n      {text: \"---\", value: \"---\"},\n      {text: \"ID\", value: \"ID\"},\n      {text: \"TID\", value: \"TID\"},\n      {text: \"Type\", value: \"Type\"}\n    ];\n\n    this.target.dedup = this.target.dedup || \"---\";\n    this.dedup = this.dedupFlow;\n\n    this.target.aggregates = this.target.aggregates || false;\n\n    this.target.mode = this.target.mode || \"All\";\n    this.mode = [\n      {text: \"All\", value: \"All\"},\n      {text: \"Outer only\", value: \"Outer\"},\n      {text: \"Inner only\", value: \"Inner\"}\n    ];\n\n    this.prevWorked = false;\n    this.prevTitle = \"\";\n    this.prevGremlin = \"\";\n    this.prevMetricField = this.metricField;\n    this.prevDedup = this.dedup;\n    this.prevAggregates = this.aggregates;\n    this.prevMode = this.mode;\n\n    this.onChangeInternal();\n  }\n\n  getCollapsedText() {\n    return this.target.gremlin;\n  }\n\n  onChangeInternal() {\n    var range = this.panelCtrl.range;\n\n    var query = this.datasource.targetToQuery(this.target, 1, 2);\n\n    if (!this.prevWorked || this.prevGremlin !== query.gremlin || this.prevMetricField != this.target.metricField ||\n        this.prevAggregates != this.target.aggregates || this.prevMode != this.target.mode ||\n        this.prevTitle != this.target.title) {\n\n      this.prevWorked = false;\n\n      // flow metrics ?\n      var metricType = this.metricType;\n\n      var target = {\n        gremlin: this.target.gremlin\n      };\n\n      var q = this.datasource.targetToQuery(target, range.from.format('X'), range.to.format('X'));\n      this.datasource.doGremlinQuery(q.gremlin).then(result => {\n        if (result.status === 200 && result.data.length > 0) {\n          this.prevWorked = true;\n\n          this.metricFields = [];\n          this.prevMetricField = this.target.metricField;\n\n          _.forEach(result.data[0], (metrics, uuid) => {\n            _.forEach(metrics, metric => {\n              _.forOwn(metric, (value, key) => {\n                if (key === \"ABBytes\" || key === \"BABytes\") {\n                  metricType = \"flow\";\n                  return false;\n                } else if (key === \"RxPackets\" || key === \"TxPackets\") {\n                  metricType = \"interface\";\n                  return false;\n                }\n              });\n\n              return false;\n            });\n            return false;\n          });\n        }\n\n        for (let k of this.metricTypeFields[metricType]) {\n          this.metricFields.push({text: k, value: k});\n        }\n\n        if (metricType === \"flow\") {\n          this.dedup = this.dedupFlow;\n        } else {\n          this.dedup = this.dedupIntf;\n        }\n        if (this.metricType != metricType) {\n          this.metricType = metricType;\n\n          // reset the metricField as we changed of type of metrics\n          this.target.metricField = \"Bytes\";\n        }\n\n        this.prevTitle = this.target.title;\n        this.prevGremlin = query.gremlin;\n        this.prevMetricField = this.target.metricField;\n        this.prevDedup = this.target.dedup;\n        this.prevAggregates = this.target.aggregates;\n        this.prevMode = this.target.mode;\n\n        this.panelCtrl.refresh();\n      });\n    }\n  }\n}\n\nSkydiveDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}