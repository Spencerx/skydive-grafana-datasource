{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","SkydiveDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","targets","filter","target","hide","query","length","when","data","requests","map","replace","field","metricField","dedup","aggregates","mode","from","range","format","to","refId","promises","doRequests","all","then","results","flatten","doRequest","request","console","log","doGremlinQuery","result","status","forEach","metrics","uuid","datapoints","value","metric","ABBytes","BABytes","ABPackets","BAPackets","Last","Start","valueOf","push","toArray","reverse","method","headers","datasourceRequest","response","message","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nexport class SkydiveDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var targets = _.filter(options.targets, target => {\n      return !target.hide && target.query && target.query !== 'Gremlin query';\n    });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var requests = _.map(targets, target => {\n      return {\n        query: this.templateSrv.replace(target.query),\n        field: target.metricField,\n        dedup: target.dedup,\n        aggregates: target.aggregates,\n        mode: target.mode,\n        from: options.range.from.format('X'),\n        to: options.range.to.format('X'),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    var promises =  this.doRequests(requests);\n    return this.q.all(promises).then(function(results) {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  doRequests(requests) {\n    return _.map(requests, request => {\n      return this.doRequest(request);\n    });\n  }\n\n  doRequest(request) {\n    // removing Context/At and Metric from the original query if present\n    var query = request.query.replace(/^G\\.At\\([^)]*\\)/i, 'G');\n    query = request.query.replace(/^G\\.Context\\([^)]*\\)/i, 'G');\n    query = query.replace(/\\.Metrics\\([^)]*\\)/i, '');\n\n    // add time context\n    query = query.replace(/^G\\./i, 'G.At(' + request.to + ').');\n\n    // add Since predicate to flows\n    query = query.replace(/\\.Flows\\([^)]*\\)/i, '.Flows(Since(' + (request.to-request.from) + '))');\n\n    switch (request.mode) {\n      case \"Outer\":\n        query += '.Has(\"ParentUUID\", \"\")';\n        break;\n      case \"Inner\":\n        query += '.Has(\"ParentUUID\", Ne(\"\"))';\n        break;\n    }\n\n    if (request.dedup != '---') {\n      query += '.Dedup(\"' + request.dedup + '\")';\n    }\n\n    query += '.Metrics()';\n\n    if (request.aggregates) {\n      query += '.Aggregates()';\n    }\n\n    console.log(query);\n\n    return this.doGremlinQuery(query).then(result => {\n      var data = [];\n      if (result.status !== 200) {\n        return data;\n      }\n\n      if (result.data.length <= 0) {\n        return data;\n      }\n\n      _.forEach(result.data[0], (metrics, uuid) => {\n        var datapoints = _.map(metrics, metric => {\n          var value = 0;\n          switch (request.field) {\n            case \"Bytes\":\n              value = metric.ABBytes + metric.BABytes;\n              break;\n            case \"Packets\":\n              value = metric.ABPackets + metric.BAPackets;\n              break;\n            default:\n              value = metric[request.field];\n          }\n          return [value / (metric.Last - metric.Start), moment(metric.Last, 'X').valueOf()];\n        });\n\n        data.push({\n          target: uuid,\n          datapoints: _.toArray(datapoints).reverse()\n        });\n      });\n\n      return data;\n    });\n  }\n\n  doGremlinQuery(query) {\n    var options = {\n      url: this.url + '/api/topology',\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      data: {'GremlinQuery': query}\n    };\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n}\n"]}