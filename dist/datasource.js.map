{"version":3,"sources":["../src/datasource.js"],"names":["_","SemverCmp","Metrics","Version","SkydiveDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","version","jsonData","q","options","targets","filter","target","hide","gremlin","length","when","data","requests","map","targetToRequest","range","from","format","to","promises","sendRequests","all","then","results","flatten","setTimeContext","path","metricField","split","subType","field","Fields","suffix","Suffix","replace","sendRawGremlinQuery","request","sendRequest","console","log","resp","status","datapoints","PointsFnc","title","toArray","reverse","catch","err","message","method","headers","datasourceRequest","response","msg","statusText"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport { SemverCmp } from \"./semver\";\nimport { Metrics, Version } from './metrics';\n\nexport class SkydiveDatasource {\n\n  /** @ngInject **/\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.version = instanceSettings.jsonData.version;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    Version(this.version);\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var targets = _.filter(options.targets, target => {\n      return !target.hide && target.gremlin && target.gremlin !== 'Gremlin query';\n    });\n\n    if (targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    var requests = _.map(targets, target => {\n      return this.targetToRequest(target, options.range.from.format('X'), options.range.to.format('X'));\n    });\n\n    var promises = this.sendRequests(requests);\n    return this.q.all(promises).then(function (results) {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  targetToRequest(target, from, to) {\n    var gremlin = this.setTimeContext(target.gremlin, from, to);\n\n    var path = target.metricField.split(\".\");\n    var type = path[0];\n    var subType = path[1];\n    var field = path[2];\n\n    var field = Metrics[type][subType].Fields[field];\n\n    var suffix = field.Suffix.replace(/%from/i, from * 1000);\n    suffix = suffix.replace(/%to/i, to * 1000);\n    gremlin += \".\" + suffix;\n\n    return {\n      \"target\": target,\n      \"gremlin\": gremlin,\n      \"field\": field,\n    };\n  }\n\n  setTimeContext(gremlin, from, to) {\n    // removing Context/At and Metric from the original query if present\n    gremlin = gremlin.replace(/^G\\.At\\([^)]*\\)/i, 'G');\n    gremlin = gremlin.replace(/^G\\.Context\\([^)]*\\)/i, 'G');\n    gremlin = gremlin.replace(/\\.Metrics\\([^)]*\\)/i, '');\n    gremlin = gremlin.replace(/\\.Aggregates\\([^)]*\\)/i, '');\n    gremlin = gremlin.replace(/\\.Dedup\\([^)]*\\)/i, '');\n\n    // add time context\n    if (SemverCmp(this.version, \"0.9\") == 0) {\n      gremlin = gremlin.replace(/^G\\./i, 'G.At(' + to + ').');\n      gremlin = gremlin.replace(/\\.Flows\\([^)]*\\)/i, '.Flows(Since(' + (to - from) + '))');\n    } else {\n      gremlin = gremlin.replace(/^G\\./i, 'G.At(' + to + ',' + (to - from) + ').');\n    }\n\n    return gremlin;\n  }\n\n  getKeys(gremlin, from, to) {\n    gremlin = this.setTimeContext(gremlin, from, to);\n    return this.sendRawGremlinQuery(gremlin + \".Limit(10).Keys()\");\n  }\n\n  sendRequests(requests) {\n    return _.map(requests, request => {\n      return this.sendRequest(request);\n    });\n  }\n\n  sendRequest(request) {\n    console.log(request.gremlin);\n\n    return this.sendRawGremlinQuery(request.gremlin).then(resp => {\n      if (resp.status !== 200) {\n        return [];\n      }\n\n      if (resp.data.length <= 0) {\n        return [];\n      }\n\n      var datapoints =  request.field.PointsFnc(resp.data, request.target.field);\n\n      return [{\n        target: request.target.title || \"Metrics\",\n        datapoints: _.toArray(datapoints).reverse()\n      }];\n    }).catch(err => {\n      if (err.data) {\n        throw { message: err.data };\n      } else {\n        throw { message: err };\n      }\n    });\n  }\n\n  // send a raw gremlin query\n  sendRawGremlinQuery(gremlin) {\n    var request = {\n      url: this.url + '/api/topology',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      data: { 'GremlinQuery': gremlin }\n    };\n    return this.backendSrv.datasourceRequest(request);\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration page\n  testDatasource() {\n    var request = {\n      url: this.url + '/api',\n      method: 'GET'\n    };\n\n    if (SemverCmp(this.version, \"0.9\") > 0) {\n      request = {\n        url: this.url + '/api/topology',\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        data: { 'GremlinQuery': \"G.At('-1s').V().Limit(1)\" }\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(request).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    }).catch(err => {\n      var msg = err.status + \" - \" + err.statusText;\n      if (err.data.length > 0) {\n        msg += \" : \" + err.data;\n      }\n\n      throw { message: msg };\n    });\n  }\n}\n"],"file":"datasource.js"}